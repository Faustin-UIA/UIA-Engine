name: UIA Bench

on:
  workflow_dispatch:
  schedule:
    - cron: "0 5 * * *"   # 05:00 UTC daily

# Prevent overlapping daily runs from stepping on each other
concurrency:
  group: uia-bench-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  baseline:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci || npm i
      - name: Run baseline
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p results
          TS=$(date -u +"%Y-%m-%dT%H%M%SZ")
          echo "BASE_TS=$TS" >> "$GITHUB_ENV"
          node baseline.js --concurrency=6 --model=gpt-4o-mini --log="results/baseline_${TS}.jsonl"
      - name: Upload baseline artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: baseline-results
          path: results/baseline_*.jsonl
          retention-days: 14
          if-no-files-found: warn

  uia:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - name: Install deps
        run: npm ci || npm i
      - name: Run UIA
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p results
          TS=$(date -u +"%Y-%m-%dT%H%M%SZ")
          echo "UIA_TS=$TS" >> "$GITHUB_ENV"
          # index.js already implements concurrency; pass model + log
          node index.js --A=all --prompts=6 --concurrency=6 --model=gpt-4o-mini --log="results/uia_${TS}.jsonl"
      - name: Upload UIA artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uia-results
          path: |
            results/uia_*.jsonl
          retention-days: 14
          if-no-files-found: warn

  compare:
    needs: [baseline, uia]
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@v4
      - name: Download baseline artifact
        uses: actions/download-artifact@v4
        with:
          name: baseline-results
          path: results
      - name: Download UIA artifact
        uses: actions/download-artifact@v4
        with:
          name: uia-results
          path: results

      - name: Compare results (generate Markdown)
        run: |
          set -euo pipefail
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');
          const dir = 'results';

          const pickLatest = (prefix) => {
            const files = fs.readdirSync(dir).filter(f => f.startsWith(prefix) && f.endsWith('.jsonl'));
            if (!files.length) return null;
            files.sort(); // ISO timestamps sort lexicographically
            return path.join(dir, files[files.length - 1]);
          };

          const baseFile = pickLatest('baseline_');
          const uiaFile  = pickLatest('uia_');

          function readRows(p) {
            if (!p || !fs.existsSync(p)) return [];
            const raw = fs.readFileSync(p, 'utf8').trim();
            if (!raw) return [];
            return raw.split('\n').map(l => { try { return JSON.parse(l) } catch { return null } }).filter(Boolean);
          }

          const baseline = readRows(baseFile).filter(r => r.event && /BASELINE/.test(r.event));
          const uia      = readRows(uiaFile).filter(r => r.event === 'BENCH:row');

          function agg(rows){
            const byA = {};
            for (const r of rows) {
              const A = r.targetA || 'NA';
              const L = Number(r.latencyMs) || 0;
              byA[A] ??= { n:0, lat:0 };
              byA[A].n++;
              byA[A].lat += L;
            }
            return Object.keys(byA).sort().map(A => ({
              A, count: byA[A].n, avgLatencyMs: byA[A].n ? Math.round(byA[A].lat / byA[A].n) : 0
            }));
          }

          const A = agg(baseline), B = agg(uia);
          const mapA = Object.fromEntries(A.map(x => [x.A, x]));
          const mapB = Object.fromEntries(B.map(x => [x.A, x]));
          const keys = Array.from(new Set([...Object.keys(mapA), ...Object.keys(mapB)])).sort();

          const ts = (p) => p ? (p.match(/_(.+)\.jsonl$/)?.[1] || '') : '';
          let md = `# UIA vs Baseline — ${ts(baseFile) || ts(uiaFile)}\n\n`;
          md += `Files: \`${baseFile || 'n/a'}\` vs \`${uiaFile || 'n/a'}\`\n\n`;
          md += `| A | baseline n | UIA n | baseline avg ms | UIA avg ms | Δ latency (ms) |\n`;
          md += `|---|------------:|------:|-----------------:|-----------:|---------------:|\n`;
          for (const k of keys) {
            const ba = mapA[k] || { count: 0, avgLatencyMs: 0 };
            const ub = mapB[k] || { count: 0, avgLatencyMs: 0 };
            const delta = (ub.avgLatencyMs || 0) - (ba.avgLatencyMs || 0);
            md += `| ${k} | ${ba.count} | ${ub.count} | ${ba.avgLatencyMs} | ${ub.avgLatencyMs} | ${delta} |\n`;
          }

          fs.writeFileSync(path.join(dir, 'compare.md'), md, 'utf8');
          console.log(md);
          NODE

      - name: Append summary to Job
        run: |
          echo "## UIA Bench — Compare" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "results/compare.md" ]; then
            cat results/compare.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "_No compare markdown found._" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload compare artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: uia-compare-${{ github.run_id }}
          path: results/**
          retention-days: 14
          if-no-files-found: warn
